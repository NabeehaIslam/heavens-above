# name: Deploy to GitHub Pages

# on:
#   push:
#     branches:
#       - main
#   pull_request:
#     branches:
#       - main
#   workflow_dispatch:

# env:
#   NODE_VERSION: '18'

# # Security: Set minimal required permissions
# permissions:
#   contents: read
#   pages: write
#   id-token: write

# # Prevent concurrent deployments
# concurrency:
#   group: "pages"
#   cancel-in-progress: false

# jobs:
#   # ================================
#   # STAGE 1: BUILD
#   # ================================
#   build:
#     runs-on: ubuntu-latest
    
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4
      
#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: ${{ env.NODE_VERSION }}
      
#       - name: Install dependencies
#         run: |
#           if [ -f package-lock.json ]; then
#             npm ci
#           elif [ -f package.json ]; then
#             npm install
#           else
#             echo "‚ö†Ô∏è No package.json found"
#           fi
      
#       - name: Build application
#         run: |
#           if [ -f package.json ]; then
#             npm run build || echo "No build script found, using static files"
#           else
#             echo "No package.json, deploying static files"
#           fi
#         env:
#           CI: true
#           NODE_ENV: production
      
#       - name: Upload build artifacts
#         uses: actions/upload-artifact@v4
#         with:
#           name: build-artifacts
#           path: |
#             dist/
#             build/
#             public/
#             index.html
#             *.html
#             *.css
#             *.js
#           retention-days: 1

#   # ================================
#   # STAGE 2: TEST
#   # ================================
#   test:
#     runs-on: ubuntu-latest
#     needs: build
    
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4
      
#       - name: Setup Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: ${{ env.NODE_VERSION }}
      
#       - name: Install dependencies
#         run: |
#           if [ -f package-lock.json ]; then
#             npm ci
#           elif [ -f package.json ]; then
#             npm install
#           else
#             echo "‚ö†Ô∏è No package.json found, skipping tests"
#             exit 0
#           fi
      
#       - name: Run linting
#         run: |
#           if grep -q '"lint"' package.json 2>/dev/null; then
#             npm run lint
#           else
#             echo "‚úì No lint script found, skipping"
#           fi
#         continue-on-error: true
      
#       - name: Run unit tests
#         run: |
#           if grep -q '"test"' package.json 2>/dev/null; then
#             npm test -- --coverage --passWithNoTests
#           else
#             echo "‚úì No test script found, skipping"
#           fi
#         env:
#           CI: true
#         continue-on-error: true
      
#       - name: Security audit
#         run: |
#           if [ -f package.json ]; then
#             npm audit --production --audit-level=moderate || echo "‚ö†Ô∏è Vulnerabilities found"
#           fi
#         continue-on-error: true
      
#       - name: Dependency check
#         run: |
#           if [ -f package.json ]; then
#             echo "üì¶ Checking for outdated packages..."
#             npm outdated || true
#           fi
      
#       - name: HTML validation
#         run: |
#           echo "üîç Validating HTML files..."
#           find . -name "*.html" -not -path "./node_modules/*" -exec echo "Found: {}" \;
      
#       - name: Upload test results
#         if: always()
#         uses: actions/upload-artifact@v4
#         with:
#           name: test-results
#           path: |
#             coverage/
#             test-results/
#           retention-days: 7
#         continue-on-error: true

#   # ================================
#   # STAGE 3: DEPLOY
#   # ================================
#   deploy:
#     runs-on: ubuntu-latest
#     needs: [build, test]
    
#     # Only deploy on push to main (not on PRs)
#     if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
#     environment:
#       name: github-pages
#       url: ${{ steps.deployment.outputs.page_url }}
    
#     steps:
#       - name: Checkout repository
#         uses: actions/checkout@v4
      
#       - name: Download build artifacts
#         uses: actions/download-artifact@v4
#         with:
#           name: build-artifacts
#         continue-on-error: true
      
#       - name: Determine publish directory
#         id: publish-dir
#         run: |
#           if [ -d "dist" ] && [ "$(ls -A dist)" ]; then
#             echo "dir=dist" >> $GITHUB_OUTPUT
#             echo "üìÅ Using dist/ directory"
#           elif [ -d "build" ] && [ "$(ls -A build)" ]; then
#             echo "dir=build" >> $GITHUB_OUTPUT
#             echo "üìÅ Using build/ directory"
#           elif [ -d "public" ] && [ "$(ls -A public)" ]; then
#             echo "dir=public" >> $GITHUB_OUTPUT
#             echo "üìÅ Using public/ directory"
#           elif [ -f "index.html" ]; then
#             echo "dir=." >> $GITHUB_OUTPUT
#             echo "üìÅ Using root directory"
#           else
#             echo "‚ùå No valid publish directory found!"
#             exit 1
#           fi
      
#       - name: Setup Pages
#         uses: actions/configure-pages@v4
      
#       - name: Upload artifact to Pages
#         uses: actions/upload-pages-artifact@v3
#         with:
#           path: ${{ steps.publish-dir.outputs.dir }}
      
#       - name: Deploy to GitHub Pages
#         id: deployment
#         uses: actions/deploy-pages@v4
      
#       - name: Deployment success
#         run: |
#           echo "‚úÖ Deployment completed successfully!"
#           echo "üåê Your site is live at: ${{ steps.deployment.outputs.page_url }}"
      
#       - name: Post-deployment health check
#         run: |
#           echo "üè• Waiting for site to be available..."
#           sleep 10
#           URL="${{ steps.deployment.outputs.page_url }}"
#           STATUS=$(curl -o /dev/null -s -w "%{http_code}" "$URL" || echo "000")
#           if [ "$STATUS" = "200" ]; then
#             echo "‚úÖ Health check passed (HTTP $STATUS)"
#           else
#             echo "‚ö†Ô∏è Health check returned HTTP $STATUS (site may need time to propagate)"
#           fi

#   # ================================
#   # NOTIFICATION (Optional)
#   # ================================
#   notify:
#     runs-on: ubuntu-latest
#     needs: [build, test, deploy]
#     if: always() && github.event_name == 'push'
    
#     steps:
#       - name: Check deployment status
#         run: |
#           BUILD_STATUS="${{ needs.build.result }}"
#           TEST_STATUS="${{ needs.test.result }}"
#           DEPLOY_STATUS="${{ needs.deploy.result }}"
          
#           echo "üìä Pipeline Results:"
#           echo "Build: $BUILD_STATUS"
#           echo "Test: $TEST_STATUS"
#           echo "Deploy: $DEPLOY_STATUS"
          
#           if [ "$DEPLOY_STATUS" == "success" ]; then
#             echo "üéâ DEPLOYMENT SUCCESS!"
#             exit 0
#           elif [ "$DEPLOY_STATUS" == "skipped" ]; then
#             if [ "$BUILD_STATUS" == "success" ] && [ "$TEST_STATUS" == "success" ]; then
#               echo "‚úÖ Build and Test passed (Deploy skipped - not on main branch)"
#               exit 0
#             else
#               echo "‚ö†Ô∏è Build or Test failed"
#               exit 1
#             fi
#           else
#             echo "‚ùå DEPLOYMENT FAILED"
#             exit 1
#           fi
