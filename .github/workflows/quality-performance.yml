name: Custom Workflow - Code Quality & Performance Analysis

on:
  # Trigger on push and pull requests
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  
  # Manual trigger with options
  workflow_dispatch:
    inputs:
      run_tests:
        description: 'Run test suite'
        required: false
        type: boolean
        default: true
      analyze_performance:
        description: 'Analyze performance metrics'
        required: false
        type: boolean
        default: true

env:
  NODE_VERSION: '18.x'

jobs:
  code-quality-analysis:
    name: Code Quality & Dependency Analysis
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install Dependencies
        run: |
          echo "üì¶ Installing dependencies..."
          npm ci
          echo "‚úÖ Dependencies installed"
      
      - name: Analyze Dependencies for Vulnerabilities
        run: |
          echo "üîç Running security audit..."
          npm audit --json > audit-report.json || true
          
          # Count vulnerabilities
          CRITICAL=$(jq '.metadata.vulnerabilities.critical // 0' audit-report.json)
          HIGH=$(jq '.metadata.vulnerabilities.high // 0' audit-report.json)
          MODERATE=$(jq '.metadata.vulnerabilities.moderate // 0' audit-report.json)
          LOW=$(jq '.metadata.vulnerabilities.low // 0' audit-report.json)
          
          echo "Security Audit Results:"
          echo "üî¥ Critical: $CRITICAL"
          echo "üü† High: $HIGH"
          echo "üü° Moderate: $MODERATE"
          echo "üü¢ Low: $LOW"
          
          # Create summary
          cat > security-summary.md << EOF
          # üîí Security Audit Report
          
          **Scan Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          
          ## Vulnerability Summary
          - üî¥ **Critical:** $CRITICAL
          - üü† **High:** $HIGH
          - üü° **Moderate:** $MODERATE
          - üü¢ **Low:** $LOW
          
          ## Recommendations
          $([ $CRITICAL -gt 0 ] && echo "‚ö†Ô∏è URGENT: Critical vulnerabilities found! Update dependencies immediately." || echo "‚úÖ No critical vulnerabilities detected")
          
          ---
          Full report available in artifacts
          EOF
      
      - name: Check Outdated Dependencies
        run: |
          echo "üìä Checking for outdated packages..."
          npm outdated --json > outdated-packages.json || true
          
          # Count outdated packages
          OUTDATED_COUNT=$(jq 'length' outdated-packages.json)
          
          echo "Outdated packages: $OUTDATED_COUNT"
          
          if [ $OUTDATED_COUNT -gt 0 ]; then
            echo "‚ö†Ô∏è Found $OUTDATED_COUNT outdated packages"
            jq -r 'to_entries[] | "- \(.key): \(.value.current) ‚Üí \(.value.latest)"' outdated-packages.json > outdated-list.txt
          else
            echo "‚úÖ All packages are up to date"
          fi
      
      - name: Analyze Code Complexity
        run: |
          echo "üìà Analyzing code complexity..."
          
          # Count JavaScript files
          JS_FILES=$(find . -name "*.js" -not -path "./node_modules/*" | wc -l)
          
          # Count lines of code
          TOTAL_LINES=$(find . -name "*.js" -not -path "./node_modules/*" -exec cat {} \; | wc -l)
          
          # Calculate average file size
          if [ $JS_FILES -gt 0 ]; then
            AVG_SIZE=$((TOTAL_LINES / JS_FILES))
          else
            AVG_SIZE=0
          fi
          
          echo "Code Statistics:"
          echo "üìÑ JavaScript Files: $JS_FILES"
          echo "üìù Total Lines: $TOTAL_LINES"
          echo "üìä Average File Size: $AVG_SIZE lines"
          
          # Create code metrics report
          cat > code-metrics.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "javascript_files": $JS_FILES,
            "total_lines": $TOTAL_LINES,
            "average_file_size": $AVG_SIZE,
            "commit": "${{ github.sha }}"
          }
          EOF
      
      - name: Generate Release Notes (On Main Branch)
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        run: |
          echo "üìù Generating release notes..."
          
          # Get latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          
          # Get commits since last tag
          COMMITS=$(git log $LATEST_TAG..HEAD --oneline --pretty=format:"- %s (%h)" | head -20)
          
          # Get changed files
          CHANGED_FILES=$(git diff --name-only $LATEST_TAG..HEAD | wc -l)
          
          # Create release notes
          cat > RELEASE_NOTES.md << EOF
          # Release Notes - $(date +%Y-%m-%d)
          
          ## üì¶ What's Changed Since $LATEST_TAG
          
          ### Commits
          $COMMITS
          
          ### Statistics
          - **Changed Files:** $CHANGED_FILES
          - **Total Commits:** $(git rev-list $LATEST_TAG..HEAD --count)
          - **Contributors:** $(git log $LATEST_TAG..HEAD --format='%an' | sort -u | wc -l)
          
          ### Code Metrics
          - **JavaScript Files:** $(jq .javascript_files code-metrics.json)
          - **Total Lines of Code:** $(jq .total_lines code-metrics.json)
          
          ### Security Status
          - **Critical Vulnerabilities:** $(jq '.metadata.vulnerabilities.critical // 0' audit-report.json)
          - **High Vulnerabilities:** $(jq '.metadata.vulnerabilities.high // 0' audit-report.json)
          
          ---
          *Auto-generated by GitHub Actions*
          EOF
          
          echo "‚úÖ Release notes generated"
      
      - name: Performance Benchmarking
        if: inputs.analyze_performance || github.event_name == 'workflow_dispatch'
        run: |
          echo "‚ö° Running performance benchmark..."
          
          # Measure script execution time
          START_TIME=$(date +%s)
          
          # Run a dry-run or test execution (adjust based on your script)
          timeout 60s node run.js || echo "Script execution completed or timed out"
          
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          
          echo "Execution time: ${DURATION}s"
          
          # Create performance report
          cat > performance-report.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "execution_time_seconds": $DURATION,
            "node_version": "${{ env.NODE_VERSION }}",
            "runner_os": "${{ runner.os }}",
            "commit": "${{ github.sha }}"
          }
          EOF
      
      - name: Create Workflow Summary
        run: |
          echo "# üìä Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## üîí Security Analysis" >> $GITHUB_STEP_SUMMARY
          echo "- Critical: $(jq '.metadata.vulnerabilities.critical // 0' audit-report.json)" >> $GITHUB_STEP_SUMMARY
          echo "- High: $(jq '.metadata.vulnerabilities.high // 0' audit-report.json)" >> $GITHUB_STEP_SUMMARY
          echo "- Moderate: $(jq '.metadata.vulnerabilities.moderate // 0' audit-report.json)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## üì¶ Dependencies" >> $GITHUB_STEP_SUMMARY
          OUTDATED=$(jq 'length' outdated-packages.json 2>/dev/null || echo "0")
          echo "- Outdated packages: $OUTDATED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## üìà Code Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- JavaScript files: $(jq .javascript_files code-metrics.json)" >> $GITHUB_STEP_SUMMARY
          echo "- Total lines: $(jq .total_lines code-metrics.json)" >> $GITHUB_STEP_SUMMARY
          echo "- Average file size: $(jq .average_file_size code-metrics.json) lines" >> $GITHUB_STEP_SUMMARY
          
          if [ -f performance-report.json ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## ‚ö° Performance" >> $GITHUB_STEP_SUMMARY
            echo "- Execution time: $(jq .execution_time_seconds performance-report.json)s" >> $GITHUB_STEP_SUMMARY
          fi
      
      - name: Upload Analysis Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: analysis-reports-${{ github.run_number }}
          path: |
            audit-report.json
            security-summary.md
            outdated-packages.json
            code-metrics.json
            performance-report.json
            RELEASE_NOTES.md
          retention-days: 30
      
      - name: Comment on PR (if applicable)
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read security summary
            let summary = '## ü§ñ Automated Code Analysis\n\n';
            
            try {
              const securitySummary = fs.readFileSync('security-summary.md', 'utf8');
              summary += securitySummary + '\n\n';
            } catch (e) {
              summary += '‚ö†Ô∏è Could not read security summary\n\n';
            }
            
            // Read code metrics
            try {
              const metrics = JSON.parse(fs.readFileSync('code-metrics.json', 'utf8'));
              summary += `### üìä Code Metrics\n`;
              summary += `- JavaScript files: ${metrics.javascript_files}\n`;
              summary += `- Total lines: ${metrics.total_lines}\n`;
              summary += `- Average file size: ${metrics.average_file_size} lines\n\n`;
            } catch (e) {
              summary += '‚ö†Ô∏è Could not read code metrics\n\n';
            }
            
            summary += '---\n*Generated by Custom Workflow*';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });

  sync-data-systems:
    name: Data System Synchronization
    runs-on: ubuntu-latest
    needs: code-quality-analysis
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Simulate Data Sync to External Systems
        run: |
          echo "üîÑ Syncing data to external systems..."
          
          # Example: This could sync scraped data to a database, cloud storage, etc.
          # For demonstration, we'll create a sync report
          
          cat > sync-report.md << EOF
          # Data Synchronization Report
          
          **Date:** $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          **Commit:** ${{ github.sha }}
          
          ## Sync Status
          
          ### Simulated External Systems
          - ‚úÖ Cloud Storage: Success
          - ‚úÖ Database: Success  
          - ‚úÖ Backup System: Success
          
          ### Sync Statistics
          - Files processed: Calculated from public/data directory
          - Sync duration: < 1 minute
          - Status: Completed successfully
          
          ---
          *This is a simulated sync. Configure actual endpoints in repository secrets.*
          EOF
          
          echo "‚úÖ Data sync completed"
      
      - name: Upload Sync Report
        uses: actions/upload-artifact@v4
        with:
          name: sync-report-${{ github.run_number }}
          path: sync-report.md
          retention-days: 15
