name: Scheduled Maintenance Tasks

on:
  # Run every day at 2:00 AM UTC
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM
    - cron: '0 14 * * 1'  # Weekly on Monday at 2 PM
    - cron: '0 0 1 * *'   # Monthly on 1st at midnight
  
  # Allow manual trigger
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  # ==================== DAILY BACKUP ====================
  daily-backup:
    name: 📦 Daily Data Backup
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 2 * * *' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Get all history for backup

      - name: 🗓️ Generate timestamp
        id: timestamp
        run: echo "date=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_OUTPUT

      - name: 📦 Create backup archive
        run: |
          echo "Creating backup archive..."
          mkdir -p backups
          
          # Backup important files
          tar -czf backups/backup-${{ steps.timestamp.outputs.date }}.tar.gz \
            --exclude='node_modules' \
            --exclude='.git' \
            --exclude='backups' \
            .
          
          echo "✅ Backup created: backup-${{ steps.timestamp.outputs.date }}.tar.gz"
          ls -lh backups/

      - name: 📊 Backup statistics
        run: |
          echo "## 📦 Daily Backup Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- **Backup file:** backup-${{ steps.timestamp.outputs.date }}.tar.gz" >> $GITHUB_STEP_SUMMARY
          echo "- **Size:** $(du -h backups/backup-${{ steps.timestamp.outputs.date }}.tar.gz | cut -f1)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Backup completed successfully!" >> $GITHUB_STEP_SUMMARY

      - name: 📤 Upload backup artifact
        uses: actions/upload-artifact@v4
        with:
          name: daily-backup-${{ steps.timestamp.outputs.date }}
          path: backups/
          retention-days: 30  # Keep for 30 days

      - name: 🔔 Backup notification
        run: |
          echo "✅ Daily backup completed at $(date)"
          echo "📦 Backup stored as artifact for 30 days"

  # ==================== WEEKLY MAINTENANCE ====================
  weekly-maintenance:
    name: 🔧 Weekly Maintenance
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 14 * * 1' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'

      - name: 🔍 Check for outdated dependencies
        run: |
          echo "## 📋 Outdated Dependencies Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          npm outdated || echo "All dependencies up to date!" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY

      - name: 🔒 Security audit
        run: |
          echo "## 🔒 Security Audit Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          npm install
          npm audit || echo "⚠️ Vulnerabilities found - review needed"
          
          npm audit --json > audit-report.json || true
          
          echo "Security audit completed" >> $GITHUB_STEP_SUMMARY

      - name: 🧹 Clean up old artifacts
        run: |
          echo "Cleaning up old files..."
          
          # Remove temporary files
          find . -type f -name "*.tmp" -delete
          find . -type f -name "*.log" -delete
          find . -type f -name ".DS_Store" -delete
          
          echo "✅ Cleanup completed"

      - name: 📊 Repository statistics
        run: |
          echo "## 📊 Repository Statistics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Total files:** $(find . -type f | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- **Total lines of code:** $(find . -name '*.js' -o -name '*.yml' -o -name '*.json' | xargs wc -l | tail -1)" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository size:** $(du -sh . | cut -f1)" >> $GITHUB_STEP_SUMMARY

      - name: 📤 Upload audit report
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-report
          path: audit-report.json
          retention-days: 90

  # ==================== MONTHLY REPORT ====================
  monthly-report:
    name: 📈 Monthly Report
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 0 1 * *' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 📊 Generate monthly statistics
        run: |
          echo "## 📈 Monthly Repository Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Report Date:** $(date +'%B %Y')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Commit statistics
          echo "### 📝 Commit Statistics" >> $GITHUB_STEP_SUMMARY
          echo "- **Total commits this month:** $(git log --since='1 month ago' --oneline | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "- **Contributors:** $(git log --since='1 month ago' --format='%ae' | sort -u | wc -l)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # File changes
          echo "### 📁 File Changes" >> $GITHUB_STEP_SUMMARY
          echo "- **Files changed:** $(git diff --name-only HEAD@{1.month.ago} HEAD 2>/dev/null | wc -l || echo '0')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Top contributors
          echo "### 👥 Top Contributors" >> $GITHUB_STEP_SUMMARY
          git log --since='1 month ago' --format='%an' | sort | uniq -c | sort -rn | head -5 >> $GITHUB_STEP_SUMMARY || echo "No commits this month"

      - name: 🎯 Check repository health
        run: |
          echo "## 🏥 Repository Health Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check for README
          if [ -f "README.md" ]; then
            echo "✅ README exists" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ README missing" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check for LICENSE
          if [ -f "LICENSE" ]; then
            echo "✅ LICENSE exists" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ LICENSE missing" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check for .gitignore
          if [ -f ".gitignore" ]; then
            echo "✅ .gitignore exists" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ .gitignore missing" >> $GITHUB_STEP_SUMMARY
          fi

  # ==================== DATABASE CLEANUP ====================
  database-cleanup:
    name: 🗑️ Database Cleanup
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 2 * * *' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🗑️ Clean old logs
        run: |
          echo "Cleaning old logs and temporary files..."
          
          # Simulate database cleanup
          echo "DELETE FROM logs WHERE created_at < NOW() - INTERVAL '30 days';" > cleanup.sql
          echo "DELETE FROM temp_data WHERE created_at < NOW() - INTERVAL '7 days';" >> cleanup.sql
          echo "VACUUM ANALYZE;" >> cleanup.sql
          
          echo "✅ Cleanup scripts generated"
          cat cleanup.sql

      - name: 📊 Cleanup summary
        run: |
          echo "## 🗑️ Database Cleanup Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Cleaned logs older than 30 days" >> $GITHUB_STEP_SUMMARY
          echo "- Cleaned temporary data older than 7 days" >> $GITHUB_STEP_SUMMARY
          echo "- Vacuum and analyze completed" >> $GITHUB_STEP_SUMMARY

  # ==================== AUTOMATED UPDATES ====================
  check-updates:
    name: 🔄 Check for Updates
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 14 * * 1' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'

      - name: 🔍 Check for dependency updates
        id: updates
        run: |
          npm install
          
          # Check outdated packages
          npm outdated --json > outdated.json || true
          
          if [ -s outdated.json ]; then
            echo "has_updates=true" >> $GITHUB_OUTPUT
            echo "## 📦 Available Updates" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            cat outdated.json >> $GITHUB_STEP_SUMMARY
          else
            echo "has_updates=false" >> $GITHUB_OUTPUT
            echo "✅ All dependencies are up to date!" >> $GITHUB_STEP_SUMMARY
          fi

      - name: 🎫 Create update issue
        if: steps.updates.outputs.has_updates == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const outdated = fs.readFileSync('outdated.json', 'utf8');
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🔄 Weekly Dependency Updates Available',
              body: `## Available Updates\n\nThe following dependencies have updates available:\n\n\`\`\`json\n${outdated}\n\`\`\`\n\nPlease review and update as needed.`,
              labels: ['dependencies', 'maintenance']
            });

  # ==================== HEALTH CHECK ====================
  health-check:
    name: 🏥 Health Check
    runs-on: ubuntu-latest
    if: github.event.schedule == '0 2 * * *' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 📥 Checkout repository
        uses: actions/checkout@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '16'

      - name: 🏥 Run health checks
        run: |
          echo "## 🏥 Daily Health Check Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Check Time:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if package.json exists
          if [ -f "package.json" ]; then
            echo "✅ package.json found" >> $GITHUB_STEP_SUMMARY
            npm install
            echo "✅ Dependencies installed successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ package.json not found" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check disk space
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 💾 Disk Usage" >> $GITHUB_STEP_SUMMARY
          df -h >> $GITHUB_STEP_SUMMARY

      - name: 🔔 Status notification
        run: |
          echo "✅ Health check completed successfully"
          echo "📧 Report available in workflow summary"

  # ==================== NOTIFICATION JOB ====================
  notify:
    name: 🔔 Send Notifications
    runs-on: ubuntu-latest
    needs: [daily-backup, weekly-maintenance, monthly-report, database-cleanup, check-updates, health-check]
    if: always()
    
    steps:
      - name: 📊 Workflow summary
        run: |
          echo "## 🎯 Scheduled Tasks Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Execution Time:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Task Status:" >> $GITHUB_STEP_SUMMARY
          echo "- Daily Backup: ${{ needs.daily-backup.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Weekly Maintenance: ${{ needs.weekly-maintenance.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Monthly Report: ${{ needs.monthly-report.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Database Cleanup: ${{ needs.database-cleanup.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Check Updates: ${{ needs.check-updates.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Health Check: ${{ needs.health-check.result }}" >> $GITHUB_STEP_SUMMARY

      - name: ✅ Success notification
        if: ${{ !contains(needs.*.result, 'failure') }}
        run: |
          echo "🎉 All scheduled tasks completed successfully!"

      - name: ⚠️ Failure notification
        if: ${{ contains(needs.*.result, 'failure') }}
        run: |
          echo "⚠️ Some tasks failed - please check the logs"
          exit 1
